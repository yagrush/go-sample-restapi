// Package schemas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package schemas

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// Defines values for EnumInObjInArrayVal.
const (
	First  EnumInObjInArrayVal = "first"
	Second EnumInObjInArrayVal = "second"
)

// N5StartsWithNumber This schema name starts with a number
type N5StartsWithNumber = map[string]interface{}

// CustomStringType defines model for CustomStringType.
type CustomStringType = string

// DeprecatedProperty defines model for DeprecatedProperty.
type DeprecatedProperty struct {
	// NewProp Use this now!
	NewProp string `json:"newProp"`
	// Deprecated:
	OldProp1 *string `json:"oldProp1,omitempty"`

	// OldProp2 It used to do this and that
	// Deprecated:
	OldProp2 *string `json:"oldProp2,omitempty"`
	// Deprecated: Use NewProp instead!
	OldProp3 *string `json:"oldProp3,omitempty"`

	// OldProp4 It used to do this and that
	// Deprecated: Use NewProp instead!
	OldProp4 *string `json:"oldProp4,omitempty"`
}

// EnumInObjInArray defines model for EnumInObjInArray.
type EnumInObjInArray = []struct {
	Val *EnumInObjInArrayVal `json:"val,omitempty"`
}

// EnumInObjInArrayVal defines model for EnumInObjInArray.Val.
type EnumInObjInArrayVal string

// GenericObject defines model for GenericObject.
type GenericObject = map[string]interface{}

// NullableProperties defines model for NullableProperties.
type NullableProperties struct {
	Optional            *string `json:"optional,omitempty"`
	OptionalAndNullable *string `json:"optionalAndNullable"`
	Required            string  `json:"required"`
	RequiredAndNullable *string `json:"requiredAndNullable"`
}

// OuterTypeWithAnonymousInner defines model for OuterTypeWithAnonymousInner.
type OuterTypeWithAnonymousInner struct {
	Inner InnerRenamedAnonymousObject `json:"inner"`
	Name  string                      `json:"name"`
}

// InnerRenamedAnonymousObject defines model for .
type InnerRenamedAnonymousObject struct {
	Id int `json:"id"`
}

// SessionID defines model for SessionID.
type SessionID = string

// StringInPath defines model for StringInPath.
type StringInPath = string

// SampleCalcAddInt64Params defines parameters for SampleCalcAddInt64.
type SampleCalcAddInt64Params struct {
	// A 数字 a
	A int64 `form:"a" json:"a"`

	// B 数字 b
	B int64 `form:"b" json:"b"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/sample/calcAddInt64)
	SampleCalcAddInt64(c *gin.Context, params SampleCalcAddInt64Params)

	// (GET /api/v1/sample/fuga)
	SampleFuga(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SampleCalcAddInt64 operation middleware
func (siw *ServerInterfaceWrapper) SampleCalcAddInt64(c *gin.Context) {

	var err error

	c.Set(Access_tokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SampleCalcAddInt64Params

	// ------------- Required query parameter "a" -------------

	if paramValue := c.Query("a"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument a is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "a", c.Request.URL.Query(), &params.A)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter a: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "b" -------------

	if paramValue := c.Query("b"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument b is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "b", c.Request.URL.Query(), &params.B)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter b: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SampleCalcAddInt64(c, params)
}

// SampleFuga operation middleware
func (siw *ServerInterfaceWrapper) SampleFuga(c *gin.Context) {

	c.Set(Access_tokenScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SampleFuga(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/sample/calcAddInt64", wrapper.SampleCalcAddInt64)
	router.GET(options.BaseURL+"/api/v1/sample/fuga", wrapper.SampleFuga)
}
